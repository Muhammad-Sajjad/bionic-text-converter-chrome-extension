/**
 * Bionic Reading APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { boolean, number, string } from '../schema';
import { BaseController } from './baseController';

export class ConvertController extends BaseController {
  /**
   * convert
   *
   * @param useQueryString
   * @param xRapidapiHost
   * @param xRapidapiKey
   * @param xRapidapiUa
   * @param content
   * @param responseType
   * @param requestType
   * @param fixation
   * @param saccade
   * @return Response from the API call
   */
  async convert(
    useQueryString: boolean,
    xRapidapiHost: string,
    xRapidapiKey: string,
    xRapidapiUa: string,
    content: string,
    responseType: string,
    requestType: string,
    fixation: number,
    saccade: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('POST', '/convert');
    const mapped = req.prepareArgs({
      useQueryString: [useQueryString, boolean()],
      xRapidapiHost: [xRapidapiHost, string()],
      xRapidapiKey: [xRapidapiKey, string()],
      xRapidapiUa: [xRapidapiUa, string()],
      content: [content, string()],
      responseType: [responseType, string()],
      requestType: [requestType, string()],
      fixation: [fixation, number()],
      saccade: [saccade, number()],
    });
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.header('useQueryString', mapped.useQueryString);
    req.header('x-rapidapi-host', mapped.xRapidapiHost);
    req.header('x-rapidapi-key', mapped.xRapidapiKey);
    req.header('x-rapidapi-ua', mapped.xRapidapiUa);
    req.form({
      content: mapped.content,
      response_type: mapped.responseType,
      request_type: mapped.requestType,
      fixation: mapped.fixation,
      saccade: mapped.saccade,
    });
    return req.callAsText(requestOptions);
  }
}
