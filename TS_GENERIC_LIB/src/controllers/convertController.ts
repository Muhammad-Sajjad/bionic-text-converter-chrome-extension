/**
 * Bionic Reading APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { boolean, number, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class ConvertController extends BaseController {
  /**
   * @param content         Example: hello world
   * @param responseType    Example: html
   * @param requestType     Example: html
   * @param fixation        Example: 1
   * @param saccade         Example: 10
   * @param contentType     Example: application/x-www-form-urlencoded
   * @param useQueryString
   * @param xRapidapiHost   Example: bionic-reading1.p.rapidapi.com
   * @param xRapidapiKey    Example: 1a63cb2e32msh41c361fa818a5b7p16af51jsna5a71c9ef4a8
   * @param xRapidapiUa     Example: RapidAPI-Playground
   * @return Response from the API call
   */
  async convert(
    content: string,
    responseType: string,
    requestType: string,
    fixation: number,
    saccade: number,
    contentType: string,
    useQueryString: boolean,
    xRapidapiHost: string,
    xRapidapiKey: string,
    xRapidapiUa: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/convert');
    const mapped = req.prepareArgs({
      content: [content, string()],
      responseType: [responseType, string()],
      requestType: [requestType, string()],
      fixation: [fixation, number()],
      saccade: [saccade, number()],
      contentType: [contentType, string()],
      useQueryString: [useQueryString, boolean()],
      xRapidapiHost: [xRapidapiHost, string()],
      xRapidapiKey: [xRapidapiKey, string()],
      xRapidapiUa: [xRapidapiUa, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('useQueryString', mapped.useQueryString);
    req.header('x-rapidapi-host', mapped.xRapidapiHost);
    req.header('x-rapidapi-key', mapped.xRapidapiKey);
    req.header('x-rapidapi-ua', mapped.xRapidapiUa);
    req.form({
      content: mapped.content,
      response_type: mapped.responseType,
      request_type: mapped.requestType,
      fixation: mapped.fixation,
      saccade: mapped.saccade,
    });
    return req.callAsJson(unknown(), requestOptions);
  }
}
